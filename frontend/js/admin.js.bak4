const API_URL = 'http://localhost:3000/api';

async function verifyAdmin() {
    console.log('Ejecutando verifyAdmin');
    const token = localStorage.getItem('token');
    console.log('Token:', token);
    if (!token) {
        console.log('No hay token, redirigiendo a admin/login.html');
        showNotification('No estás autenticado. Por favor, inicia sesión.', true);
        setTimeout(() => window.location.href = '../admin/login.html', 2000);
        return false;
    }
    try {
        console.log('Verificando token en /api/auth/verify');
        const response = await fetch(`${API_URL}/auth/verify`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log('Respuesta de verify:', response.status, response.statusText);
        if (!response.ok) {
            if (response.status === 401) {
                localStorage.removeItem('token');
                showNotification('Sesión expirada. Por favor, inicia sesión nuevamente.', true);
                setTimeout(() => window.location.href = '../admin/login.html', 2000);
                return false;
            }
            throw new Error('No autorizado');
        }
        const data = await response.json();
        console.log('Datos de verify:', data);
        if (data.role !== 'admin') {
            console.log('No es admin, redirigiendo a admin/login.html');
            showNotification('Acceso denegado. Solo administradores.', true);
            setTimeout(() => window.location.href = '../admin/login.html', 2000);
            return false;
        }
        document.getElementById('userName').textContent = data.name || 'Administrador';
        document.getElementById('userRole').textContent = data.role === 'admin' ? 'Super Admin' : 'Usuario';
        console.log('Admin verificado exitosamente');
        return true;
    } catch (error) {
        console.error('Error al verificar admin:', error);
        showNotification('Error al verificar autenticación', true);
        setTimeout(() => window.location.href = '../admin/login.html', 2000);
        return false;
    }
}

function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.style.backgroundColor = isError ? '#dc3545' : '#28a745';
    notification.style.display = 'block';
    setTimeout(() => notification.style.display = 'none', 3000);
}

async function loadStats() {
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            showNotification('No autenticado. Por favor, inicia sesión.', true);
            setTimeout(() => window.location.href = '../admin/login.html', 2000);
            return;
        }
        const response = await fetch(`${API_URL}/stats`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!response.ok) {
            if (response.status === 401) {
                localStorage.removeItem('token');
                showNotification('Sesión expirada. Por favor, inicia sesión nuevamente.', true);
                setTimeout(() => window.location.href = '../admin/login.html', 2000);
                return;
            }
            throw new Error('Error al cargar estadísticas');
        }
        const stats = await response.json();
        document.getElementById('salesToday').textContent = `$${parseFloat(stats.salesToday || 0).toFixed(2)}`;
        document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
        document.getElementById('totalOrders').textContent = stats.totalOrders || 0;
        document.getElementById('totalProducts').textContent = stats.totalProducts || 0;
        document.getElementById('salesTrend').textContent = `${stats.salesTrend || 0}%`;
        document.getElementById('usersTrend').textContent = `${stats.usersTrend || 0}%`;
        document.getElementById('ordersTrend').textContent = `${stats.ordersTrend || 0}%`;
        document.getElementById('productsTrend').textContent = `${stats.productsTrend || 0}%`;
        document.getElementById('notificationBadge').textContent = stats.pendingOrders || 0;
    } catch (error) {
        console.error('Error al cargar estadísticas:', error);
        showNotification('Error al cargar estadísticas', true);
    }
}