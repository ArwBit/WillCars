require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const path = require('path');
const http = require('http');
const { Server } = require('socket.io');
const { Pool } = require('pg');
const winston = require('winston');

// Configurar logger
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: process.env.FRONTEND_URL || 'http://localhost:3000',
        methods: ['GET', 'POST']
    }
});

// Configurar base de datos
const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT
});

// Probar conexión a la base de datos
pool.connect((err) => {
    if (err) {
        logger.error('Error conectando a la base de datos:', err);
        process.exit(1);
    }
    logger.info('Conexión a la base de datos exitosa');
});

// Middlewares
app.use(cors({ origin: process.env.FRONTEND_URL || 'http://localhost:3000' }));
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: [
                "'self'",
                'https://code.jquery.com',
                'https://cdn.jsdelivr.net',
                'http://localhost:3000/socket.io/socket.io.js',
                'https://cdnjs.cloudflare.com',
                'https://stackpath.bootstrapcdn.com',
                "'unsafe-inline'"
            ],
            styleSrc: [
                "'self'",
                'https://cdnjs.cloudflare.com',
                'https://fonts.googleapis.com',
                'https://cdn.jsdelivr.net',
                "'unsafe-inline'"
            ],
            fontSrc: [
                "'self'",
                'https://cdnjs.cloudflare.com',
                'https://fonts.gstatic.com'
            ],
            imgSrc: [
                "'self'",
                'http://localhost:3000',
                'data:'
            ],
            connectSrc: [
                "'self'",
                'http://localhost:3000',
                'ws://localhost:3000',
                process.env.FRONTEND_URL || "'self'"
            ],
            objectSrc: ["'none'"],
            mediaSrc: ["'none'"],
            frameSrc: ["'none'"]
        }
    }
}));
app.use(express.json());

// Depuración de rutas estáticas
logger.info('Configurando ruta estática para frontend:', path.join(__dirname, '../frontend'));
logger.info('Configurando ruta estática para frontend/admin:', path.join(__dirname, '../frontend/admin'));

// Servir archivos estáticos
app.use(express.static(path.join(__dirname, '../frontend')));
app.use('/admin', express.static(path.join(__dirname, '../frontend/admin')));

// Verificar acceso a login.html
app.get('/admin/login.html', (req, res) => {
    logger.info('Solicitud a /admin/login.html');
    res.sendFile(path.join(__dirname, '../frontend/admin/login.html'));
});

// Servir archivos de Uploads
app.use('/Uploads', express.static(path.join(__dirname, 'Uploads')));

// Rutas API
app.use('/api/auth', require('./routes/auth'));
app.use('/api/products', require('./routes/products'));
app.use('/api/orders', require('./routes/orders'));
app.use('/api/proveedores', require('./routes/proveedores'));
app.use('/api/stats', require('./routes/stats'));
app.use('/api/users', require('./routes/users'));
app.use('/api/newsletter', require('./routes/newsletter'));
app.use('/api/settings', require('./routes/settings'));

// WebSocket con autenticación
io.use((socket, next) => {
    const token = socket.handshake.auth.token;
    if (!token) return next(new Error('No token provided'));
    try {
        const jwt = require('jsonwebtoken');
        jwt.verify(token, process.env.JWT_SECRET);
        next();
    } catch (error) {
        next(new Error('Token inválido'));
    }
});

io.on('connection', (socket) => {
    logger.info('Cliente conectado a WebSocket', { socketId: socket.id });
    socket.on('disconnect', () => {
        logger.info('Cliente desconectado', { socketId: socket.id });
    });
});

// Iniciar servidor
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    logger.info(`Servidor corriendo en http://localhost:${PORT}`);
});